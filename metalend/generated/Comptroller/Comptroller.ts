// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Failure extends ethereum.Event {
  get params(): Failure__Params {
    return new Failure__Params(this);
  }
}

export class Failure__Params {
  _event: Failure;

  constructor(event: Failure) {
    this._event = event;
  }

  get error(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get info(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get detail(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewAdmin extends ethereum.Event {
  get params(): NewAdmin__Params {
    return new NewAdmin__Params(this);
  }
}

export class NewAdmin__Params {
  _event: NewAdmin;

  constructor(event: NewAdmin) {
    this._event = event;
  }

  get oldAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewImplementation extends ethereum.Event {
  get params(): NewImplementation__Params {
    return new NewImplementation__Params(this);
  }
}

export class NewImplementation__Params {
  _event: NewImplementation;

  constructor(event: NewImplementation) {
    this._event = event;
  }

  get oldImplementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newImplementation(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewPendingAdmin extends ethereum.Event {
  get params(): NewPendingAdmin__Params {
    return new NewPendingAdmin__Params(this);
  }
}

export class NewPendingAdmin__Params {
  _event: NewPendingAdmin;

  constructor(event: NewPendingAdmin) {
    this._event = event;
  }

  get oldPendingAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPendingAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewPendingImplementation extends ethereum.Event {
  get params(): NewPendingImplementation__Params {
    return new NewPendingImplementation__Params(this);
  }
}

export class NewPendingImplementation__Params {
  _event: NewPendingImplementation;

  constructor(event: NewPendingImplementation) {
    this._event = event;
  }

  get oldPendingImplementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPendingImplementation(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ActionPaused extends ethereum.Event {
  get params(): ActionPaused__Params {
    return new ActionPaused__Params(this);
  }
}

export class ActionPaused__Params {
  _event: ActionPaused;

  constructor(event: ActionPaused) {
    this._event = event;
  }

  get action(): string {
    return this._event.parameters[0].value.toString();
  }

  get pauseState(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class ActionPaused1 extends ethereum.Event {
  get params(): ActionPaused1__Params {
    return new ActionPaused1__Params(this);
  }
}

export class ActionPaused1__Params {
  _event: ActionPaused1;

  constructor(event: ActionPaused1) {
    this._event = event;
  }

  get cToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get action(): string {
    return this._event.parameters[1].value.toString();
  }

  get pauseState(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class MarketListed extends ethereum.Event {
  get params(): MarketListed__Params {
    return new MarketListed__Params(this);
  }
}

export class MarketListed__Params {
  _event: MarketListed;

  constructor(event: MarketListed) {
    this._event = event;
  }

  get cToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NewBorrowCap extends ethereum.Event {
  get params(): NewBorrowCap__Params {
    return new NewBorrowCap__Params(this);
  }
}

export class NewBorrowCap__Params {
  _event: NewBorrowCap;

  constructor(event: NewBorrowCap) {
    this._event = event;
  }

  get cToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newBorrowCap(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewBorrowCapGuardian extends ethereum.Event {
  get params(): NewBorrowCapGuardian__Params {
    return new NewBorrowCapGuardian__Params(this);
  }
}

export class NewBorrowCapGuardian__Params {
  _event: NewBorrowCapGuardian;

  constructor(event: NewBorrowCapGuardian) {
    this._event = event;
  }

  get oldBorrowCapGuardian(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newBorrowCapGuardian(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewCloseFactor extends ethereum.Event {
  get params(): NewCloseFactor__Params {
    return new NewCloseFactor__Params(this);
  }
}

export class NewCloseFactor__Params {
  _event: NewCloseFactor;

  constructor(event: NewCloseFactor) {
    this._event = event;
  }

  get oldCloseFactorMantissa(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newCloseFactorMantissa(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewCollateralFactor extends ethereum.Event {
  get params(): NewCollateralFactor__Params {
    return new NewCollateralFactor__Params(this);
  }
}

export class NewCollateralFactor__Params {
  _event: NewCollateralFactor;

  constructor(event: NewCollateralFactor) {
    this._event = event;
  }

  get cToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldCollateralFactorMantissa(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newCollateralFactorMantissa(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewLiquidationDiscount extends ethereum.Event {
  get params(): NewLiquidationDiscount__Params {
    return new NewLiquidationDiscount__Params(this);
  }
}

export class NewLiquidationDiscount__Params {
  _event: NewLiquidationDiscount;

  constructor(event: NewLiquidationDiscount) {
    this._event = event;
  }

  get oldLiquidationDiscountMantissa(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newLiquidationDiscountMantissa(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewLiquidationIncentive extends ethereum.Event {
  get params(): NewLiquidationIncentive__Params {
    return new NewLiquidationIncentive__Params(this);
  }
}

export class NewLiquidationIncentive__Params {
  _event: NewLiquidationIncentive;

  constructor(event: NewLiquidationIncentive) {
    this._event = event;
  }

  get oldLiquidationIncentiveMantissa(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newLiquidationIncentiveMantissa(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewPauseGuardian extends ethereum.Event {
  get params(): NewPauseGuardian__Params {
    return new NewPauseGuardian__Params(this);
  }
}

export class NewPauseGuardian__Params {
  _event: NewPauseGuardian;

  constructor(event: NewPauseGuardian) {
    this._event = event;
  }

  get oldPauseGuardian(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPauseGuardian(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewPriceOracle extends ethereum.Event {
  get params(): NewPriceOracle__Params {
    return new NewPriceOracle__Params(this);
  }
}

export class NewPriceOracle__Params {
  _event: NewPriceOracle;

  constructor(event: NewPriceOracle) {
    this._event = event;
  }

  get oldPriceOracle(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPriceOracle(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Comptroller__borrowAllowedInputAppraisalStruct extends ethereum.Tuple {
  get appraisalTokens(): Array<Address> {
    return this[0].toAddressArray();
  }

  get appraisalLengths(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get appraisalTokenIds(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get appraisalValues(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get appraisalGoodUntil(): BigInt {
    return this[4].toBigInt();
  }

  get signature(): Bytes {
    return this[5].toBytes();
  }
}

export class Comptroller__liquidateBorrowAllowedInputAppraisalStruct extends ethereum.Tuple {
  get appraisalTokens(): Array<Address> {
    return this[0].toAddressArray();
  }

  get appraisalLengths(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get appraisalTokenIds(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get appraisalValues(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get appraisalGoodUntil(): BigInt {
    return this[4].toBigInt();
  }

  get signature(): Bytes {
    return this[5].toBytes();
  }
}

export class Comptroller__liquidateBorrowAllowedErc721InputAppraisalStruct extends ethereum.Tuple {
  get appraisalTokens(): Array<Address> {
    return this[0].toAddressArray();
  }

  get appraisalLengths(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get appraisalTokenIds(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get appraisalValues(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get appraisalGoodUntil(): BigInt {
    return this[4].toBigInt();
  }

  get signature(): Bytes {
    return this[5].toBytes();
  }
}

export class Comptroller__liquidateCalculateSeizeTokensResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Comptroller__marketsResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Comptroller__redeemAllowedInputAppraisalStruct extends ethereum.Tuple {
  get appraisalTokens(): Array<Address> {
    return this[0].toAddressArray();
  }

  get appraisalLengths(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get appraisalTokenIds(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get appraisalValues(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get appraisalGoodUntil(): BigInt {
    return this[4].toBigInt();
  }

  get signature(): Bytes {
    return this[5].toBytes();
  }
}

export class Comptroller__redeemAllowedErc721InputAppraisalStruct extends ethereum.Tuple {
  get appraisalTokens(): Array<Address> {
    return this[0].toAddressArray();
  }

  get appraisalLengths(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get appraisalTokenIds(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get appraisalValues(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get appraisalGoodUntil(): BigInt {
    return this[4].toBigInt();
  }

  get signature(): Bytes {
    return this[5].toBytes();
  }
}

export class Comptroller__transferAllowedInputAppraisalStruct extends ethereum.Tuple {
  get appraisalTokens(): Array<Address> {
    return this[0].toAddressArray();
  }

  get appraisalLengths(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get appraisalTokenIds(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get appraisalValues(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get appraisalGoodUntil(): BigInt {
    return this[4].toBigInt();
  }

  get signature(): Bytes {
    return this[5].toBytes();
  }
}

export class Comptroller extends ethereum.SmartContract {
  static bind(address: Address): Comptroller {
    return new Comptroller("Comptroller", address);
  }

  _acceptAdmin(): BigInt {
    let result = super.call("_acceptAdmin", "_acceptAdmin():(uint256)", []);

    return result[0].toBigInt();
  }

  try__acceptAdmin(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_acceptAdmin", "_acceptAdmin():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _acceptImplementation(): BigInt {
    let result = super.call(
      "_acceptImplementation",
      "_acceptImplementation():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__acceptImplementation(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_acceptImplementation",
      "_acceptImplementation():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _setPendingAdmin(newPendingAdmin: Address): BigInt {
    let result = super.call(
      "_setPendingAdmin",
      "_setPendingAdmin(address):(uint256)",
      [ethereum.Value.fromAddress(newPendingAdmin)]
    );

    return result[0].toBigInt();
  }

  try__setPendingAdmin(newPendingAdmin: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_setPendingAdmin",
      "_setPendingAdmin(address):(uint256)",
      [ethereum.Value.fromAddress(newPendingAdmin)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _setPendingImplementation(newPendingImplementation: Address): BigInt {
    let result = super.call(
      "_setPendingImplementation",
      "_setPendingImplementation(address):(uint256)",
      [ethereum.Value.fromAddress(newPendingImplementation)]
    );

    return result[0].toBigInt();
  }

  try__setPendingImplementation(
    newPendingImplementation: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_setPendingImplementation",
      "_setPendingImplementation(address):(uint256)",
      [ethereum.Value.fromAddress(newPendingImplementation)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  comptrollerImplementation(): Address {
    let result = super.call(
      "comptrollerImplementation",
      "comptrollerImplementation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_comptrollerImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "comptrollerImplementation",
      "comptrollerImplementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingAdmin(): Address {
    let result = super.call("pendingAdmin", "pendingAdmin():(address)", []);

    return result[0].toAddress();
  }

  try_pendingAdmin(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingAdmin", "pendingAdmin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingComptrollerImplementation(): Address {
    let result = super.call(
      "pendingComptrollerImplementation",
      "pendingComptrollerImplementation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_pendingComptrollerImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "pendingComptrollerImplementation",
      "pendingComptrollerImplementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _setBorrowPaused(cToken: Address, state: boolean): boolean {
    let result = super.call(
      "_setBorrowPaused",
      "_setBorrowPaused(address,bool):(bool)",
      [ethereum.Value.fromAddress(cToken), ethereum.Value.fromBoolean(state)]
    );

    return result[0].toBoolean();
  }

  try__setBorrowPaused(
    cToken: Address,
    state: boolean
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "_setBorrowPaused",
      "_setBorrowPaused(address,bool):(bool)",
      [ethereum.Value.fromAddress(cToken), ethereum.Value.fromBoolean(state)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _setCloseFactor(newCloseFactorMantissa: BigInt): BigInt {
    let result = super.call(
      "_setCloseFactor",
      "_setCloseFactor(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(newCloseFactorMantissa)]
    );

    return result[0].toBigInt();
  }

  try__setCloseFactor(
    newCloseFactorMantissa: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_setCloseFactor",
      "_setCloseFactor(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(newCloseFactorMantissa)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _setCollateralFactor(
    cToken: Address,
    newCollateralFactorMantissa: BigInt,
    isErc721: boolean
  ): BigInt {
    let result = super.call(
      "_setCollateralFactor",
      "_setCollateralFactor(address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromUnsignedBigInt(newCollateralFactorMantissa),
        ethereum.Value.fromBoolean(isErc721)
      ]
    );

    return result[0].toBigInt();
  }

  try__setCollateralFactor(
    cToken: Address,
    newCollateralFactorMantissa: BigInt,
    isErc721: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_setCollateralFactor",
      "_setCollateralFactor(address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromUnsignedBigInt(newCollateralFactorMantissa),
        ethereum.Value.fromBoolean(isErc721)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _setLiquidationDiscount(newLiquidationDiscountMantissa: BigInt): BigInt {
    let result = super.call(
      "_setLiquidationDiscount",
      "_setLiquidationDiscount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(newLiquidationDiscountMantissa)]
    );

    return result[0].toBigInt();
  }

  try__setLiquidationDiscount(
    newLiquidationDiscountMantissa: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_setLiquidationDiscount",
      "_setLiquidationDiscount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(newLiquidationDiscountMantissa)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _setLiquidationIncentive(newLiquidationIncentiveMantissa: BigInt): BigInt {
    let result = super.call(
      "_setLiquidationIncentive",
      "_setLiquidationIncentive(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(newLiquidationIncentiveMantissa)]
    );

    return result[0].toBigInt();
  }

  try__setLiquidationIncentive(
    newLiquidationIncentiveMantissa: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_setLiquidationIncentive",
      "_setLiquidationIncentive(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(newLiquidationIncentiveMantissa)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _setMintPaused(cToken: Address, state: boolean): boolean {
    let result = super.call(
      "_setMintPaused",
      "_setMintPaused(address,bool):(bool)",
      [ethereum.Value.fromAddress(cToken), ethereum.Value.fromBoolean(state)]
    );

    return result[0].toBoolean();
  }

  try__setMintPaused(
    cToken: Address,
    state: boolean
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "_setMintPaused",
      "_setMintPaused(address,bool):(bool)",
      [ethereum.Value.fromAddress(cToken), ethereum.Value.fromBoolean(state)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _setPauseGuardian(newPauseGuardian: Address): BigInt {
    let result = super.call(
      "_setPauseGuardian",
      "_setPauseGuardian(address):(uint256)",
      [ethereum.Value.fromAddress(newPauseGuardian)]
    );

    return result[0].toBigInt();
  }

  try__setPauseGuardian(
    newPauseGuardian: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_setPauseGuardian",
      "_setPauseGuardian(address):(uint256)",
      [ethereum.Value.fromAddress(newPauseGuardian)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _setPriceOracle(newOracle: Address): BigInt {
    let result = super.call(
      "_setPriceOracle",
      "_setPriceOracle(address):(uint256)",
      [ethereum.Value.fromAddress(newOracle)]
    );

    return result[0].toBigInt();
  }

  try__setPriceOracle(newOracle: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_setPriceOracle",
      "_setPriceOracle(address):(uint256)",
      [ethereum.Value.fromAddress(newOracle)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _setSeizePaused(state: boolean): boolean {
    let result = super.call("_setSeizePaused", "_setSeizePaused(bool):(bool)", [
      ethereum.Value.fromBoolean(state)
    ]);

    return result[0].toBoolean();
  }

  try__setSeizePaused(state: boolean): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "_setSeizePaused",
      "_setSeizePaused(bool):(bool)",
      [ethereum.Value.fromBoolean(state)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _setTransferPaused(state: boolean): boolean {
    let result = super.call(
      "_setTransferPaused",
      "_setTransferPaused(bool):(bool)",
      [ethereum.Value.fromBoolean(state)]
    );

    return result[0].toBoolean();
  }

  try__setTransferPaused(state: boolean): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "_setTransferPaused",
      "_setTransferPaused(bool):(bool)",
      [ethereum.Value.fromBoolean(state)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _supportMarket(cToken: Address, isErc721: boolean): BigInt {
    let result = super.call(
      "_supportMarket",
      "_supportMarket(address,bool):(uint256)",
      [ethereum.Value.fromAddress(cToken), ethereum.Value.fromBoolean(isErc721)]
    );

    return result[0].toBigInt();
  }

  try__supportMarket(
    cToken: Address,
    isErc721: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_supportMarket",
      "_supportMarket(address,bool):(uint256)",
      [ethereum.Value.fromAddress(cToken), ethereum.Value.fromBoolean(isErc721)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allErc721Markets(param0: BigInt): Address {
    let result = super.call(
      "allErc721Markets",
      "allErc721Markets(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_allErc721Markets(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "allErc721Markets",
      "allErc721Markets(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allMarkets(param0: BigInt): Address {
    let result = super.call("allMarkets", "allMarkets(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_allMarkets(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("allMarkets", "allMarkets(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  appraisalOracle(): Address {
    let result = super.call(
      "appraisalOracle",
      "appraisalOracle():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_appraisalOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "appraisalOracle",
      "appraisalOracle():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  borrowAllowed(
    cToken: Address,
    borrower: Address,
    borrowAmount: BigInt,
    appraisal: Comptroller__borrowAllowedInputAppraisalStruct
  ): BigInt {
    let result = super.call(
      "borrowAllowed",
      "borrowAllowed(address,address,uint256,(address[],uint256[],uint256[],uint256[],uint256,bytes)):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(borrowAmount),
        ethereum.Value.fromTuple(appraisal)
      ]
    );

    return result[0].toBigInt();
  }

  try_borrowAllowed(
    cToken: Address,
    borrower: Address,
    borrowAmount: BigInt,
    appraisal: Comptroller__borrowAllowedInputAppraisalStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrowAllowed",
      "borrowAllowed(address,address,uint256,(address[],uint256[],uint256[],uint256[],uint256,bytes)):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(borrowAmount),
        ethereum.Value.fromTuple(appraisal)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowCapGuardian(): Address {
    let result = super.call(
      "borrowCapGuardian",
      "borrowCapGuardian():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_borrowCapGuardian(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "borrowCapGuardian",
      "borrowCapGuardian():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  borrowCaps(param0: Address): BigInt {
    let result = super.call("borrowCaps", "borrowCaps(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_borrowCaps(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("borrowCaps", "borrowCaps(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowGuardianPaused(param0: Address): boolean {
    let result = super.call(
      "borrowGuardianPaused",
      "borrowGuardianPaused(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_borrowGuardianPaused(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "borrowGuardianPaused",
      "borrowGuardianPaused(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  closeFactorMantissa(): BigInt {
    let result = super.call(
      "closeFactorMantissa",
      "closeFactorMantissa():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_closeFactorMantissa(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "closeFactorMantissa",
      "closeFactorMantissa():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  compComptroller(): Address {
    let result = super.call(
      "compComptroller",
      "compComptroller():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_compComptroller(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "compComptroller",
      "compComptroller():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAllErc721Markets(): Array<Address> {
    let result = super.call(
      "getAllErc721Markets",
      "getAllErc721Markets():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getAllErc721Markets(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllErc721Markets",
      "getAllErc721Markets():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getAllMarkets(): Array<Address> {
    let result = super.call("getAllMarkets", "getAllMarkets():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getAllMarkets(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllMarkets",
      "getAllMarkets():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getBlockNumber(): BigInt {
    let result = super.call("getBlockNumber", "getBlockNumber():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getBlockNumber(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBlockNumber",
      "getBlockNumber():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBorrowGuardianPaused(cToken: Address): boolean {
    let result = super.call(
      "getBorrowGuardianPaused",
      "getBorrowGuardianPaused(address):(bool)",
      [ethereum.Value.fromAddress(cToken)]
    );

    return result[0].toBoolean();
  }

  try_getBorrowGuardianPaused(cToken: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getBorrowGuardianPaused",
      "getBorrowGuardianPaused(address):(bool)",
      [ethereum.Value.fromAddress(cToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getCloseFactorMantissa(): BigInt {
    let result = super.call(
      "getCloseFactorMantissa",
      "getCloseFactorMantissa():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCloseFactorMantissa(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCloseFactorMantissa",
      "getCloseFactorMantissa():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCollateralFactorMantissa(asset: Address): BigInt {
    let result = super.call(
      "getCollateralFactorMantissa",
      "getCollateralFactorMantissa(address):(uint256)",
      [ethereum.Value.fromAddress(asset)]
    );

    return result[0].toBigInt();
  }

  try_getCollateralFactorMantissa(asset: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCollateralFactorMantissa",
      "getCollateralFactorMantissa(address):(uint256)",
      [ethereum.Value.fromAddress(asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLiquidationDiscountMantissa(): BigInt {
    let result = super.call(
      "getLiquidationDiscountMantissa",
      "getLiquidationDiscountMantissa():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLiquidationDiscountMantissa(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLiquidationDiscountMantissa",
      "getLiquidationDiscountMantissa():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLiquidationIncentiveMantissa(): BigInt {
    let result = super.call(
      "getLiquidationIncentiveMantissa",
      "getLiquidationIncentiveMantissa():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLiquidationIncentiveMantissa(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLiquidationIncentiveMantissa",
      "getLiquidationIncentiveMantissa():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOracle(): Address {
    let result = super.call("getOracle", "getOracle():(address)", []);

    return result[0].toAddress();
  }

  try_getOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("getOracle", "getOracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isComptroller(): boolean {
    let result = super.call("isComptroller", "isComptroller():(bool)", []);

    return result[0].toBoolean();
  }

  try_isComptroller(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isComptroller", "isComptroller():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isMarketListed(cToken: Address): boolean {
    let result = super.call(
      "isMarketListed",
      "isMarketListed(address):(bool)",
      [ethereum.Value.fromAddress(cToken)]
    );

    return result[0].toBoolean();
  }

  try_isMarketListed(cToken: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isMarketListed",
      "isMarketListed(address):(bool)",
      [ethereum.Value.fromAddress(cToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liquidateBorrowAllowed(
    cTokenBorrowed: Address,
    cTokenCollateral: Address,
    borrower: Address,
    repayAmount: BigInt,
    appraisal: Comptroller__liquidateBorrowAllowedInputAppraisalStruct
  ): BigInt {
    let result = super.call(
      "liquidateBorrowAllowed",
      "liquidateBorrowAllowed(address,address,address,uint256,(address[],uint256[],uint256[],uint256[],uint256,bytes)):(uint256)",
      [
        ethereum.Value.fromAddress(cTokenBorrowed),
        ethereum.Value.fromAddress(cTokenCollateral),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(repayAmount),
        ethereum.Value.fromTuple(appraisal)
      ]
    );

    return result[0].toBigInt();
  }

  try_liquidateBorrowAllowed(
    cTokenBorrowed: Address,
    cTokenCollateral: Address,
    borrower: Address,
    repayAmount: BigInt,
    appraisal: Comptroller__liquidateBorrowAllowedInputAppraisalStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidateBorrowAllowed",
      "liquidateBorrowAllowed(address,address,address,uint256,(address[],uint256[],uint256[],uint256[],uint256,bytes)):(uint256)",
      [
        ethereum.Value.fromAddress(cTokenBorrowed),
        ethereum.Value.fromAddress(cTokenCollateral),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(repayAmount),
        ethereum.Value.fromTuple(appraisal)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidateBorrowAllowedErc721(
    cTokenBorrowed: Address,
    cErc721TokenCollateral: Address,
    borrower: Address,
    repayAmount: BigInt,
    tokenIds: Array<BigInt>,
    appraisal: Comptroller__liquidateBorrowAllowedErc721InputAppraisalStruct
  ): BigInt {
    let result = super.call(
      "liquidateBorrowAllowedErc721",
      "liquidateBorrowAllowedErc721(address,address,address,uint256,uint256[],(address[],uint256[],uint256[],uint256[],uint256,bytes)):(uint256)",
      [
        ethereum.Value.fromAddress(cTokenBorrowed),
        ethereum.Value.fromAddress(cErc721TokenCollateral),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(repayAmount),
        ethereum.Value.fromUnsignedBigIntArray(tokenIds),
        ethereum.Value.fromTuple(appraisal)
      ]
    );

    return result[0].toBigInt();
  }

  try_liquidateBorrowAllowedErc721(
    cTokenBorrowed: Address,
    cErc721TokenCollateral: Address,
    borrower: Address,
    repayAmount: BigInt,
    tokenIds: Array<BigInt>,
    appraisal: Comptroller__liquidateBorrowAllowedErc721InputAppraisalStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidateBorrowAllowedErc721",
      "liquidateBorrowAllowedErc721(address,address,address,uint256,uint256[],(address[],uint256[],uint256[],uint256[],uint256,bytes)):(uint256)",
      [
        ethereum.Value.fromAddress(cTokenBorrowed),
        ethereum.Value.fromAddress(cErc721TokenCollateral),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(repayAmount),
        ethereum.Value.fromUnsignedBigIntArray(tokenIds),
        ethereum.Value.fromTuple(appraisal)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidateCalculateSeizeTokens(
    cTokenBorrowed: Address,
    cTokenCollateral: Address,
    actualRepayAmount: BigInt
  ): Comptroller__liquidateCalculateSeizeTokensResult {
    let result = super.call(
      "liquidateCalculateSeizeTokens",
      "liquidateCalculateSeizeTokens(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(cTokenBorrowed),
        ethereum.Value.fromAddress(cTokenCollateral),
        ethereum.Value.fromUnsignedBigInt(actualRepayAmount)
      ]
    );

    return new Comptroller__liquidateCalculateSeizeTokensResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_liquidateCalculateSeizeTokens(
    cTokenBorrowed: Address,
    cTokenCollateral: Address,
    actualRepayAmount: BigInt
  ): ethereum.CallResult<Comptroller__liquidateCalculateSeizeTokensResult> {
    let result = super.tryCall(
      "liquidateCalculateSeizeTokens",
      "liquidateCalculateSeizeTokens(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(cTokenBorrowed),
        ethereum.Value.fromAddress(cTokenCollateral),
        ethereum.Value.fromUnsignedBigInt(actualRepayAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Comptroller__liquidateCalculateSeizeTokensResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  liquidationDiscountMantissa(): BigInt {
    let result = super.call(
      "liquidationDiscountMantissa",
      "liquidationDiscountMantissa():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidationDiscountMantissa(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationDiscountMantissa",
      "liquidationDiscountMantissa():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidationIncentiveMantissa(): BigInt {
    let result = super.call(
      "liquidationIncentiveMantissa",
      "liquidationIncentiveMantissa():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidationIncentiveMantissa(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationIncentiveMantissa",
      "liquidationIncentiveMantissa():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidityAssessor(): Address {
    let result = super.call(
      "liquidityAssessor",
      "liquidityAssessor():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_liquidityAssessor(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "liquidityAssessor",
      "liquidityAssessor():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  markets(param0: Address): Comptroller__marketsResult {
    let result = super.call("markets", "markets(address):(bool,uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return new Comptroller__marketsResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_markets(
    param0: Address
  ): ethereum.CallResult<Comptroller__marketsResult> {
    let result = super.tryCall("markets", "markets(address):(bool,uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Comptroller__marketsResult(value[0].toBoolean(), value[1].toBigInt())
    );
  }

  mintAllowed(cToken: Address, minter: Address): BigInt {
    let result = super.call(
      "mintAllowed",
      "mintAllowed(address,address):(uint256)",
      [ethereum.Value.fromAddress(cToken), ethereum.Value.fromAddress(minter)]
    );

    return result[0].toBigInt();
  }

  try_mintAllowed(
    cToken: Address,
    minter: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintAllowed",
      "mintAllowed(address,address):(uint256)",
      [ethereum.Value.fromAddress(cToken), ethereum.Value.fromAddress(minter)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintAllowedErc721(cErc721Token: Address): BigInt {
    let result = super.call(
      "mintAllowedErc721",
      "mintAllowedErc721(address):(uint256)",
      [ethereum.Value.fromAddress(cErc721Token)]
    );

    return result[0].toBigInt();
  }

  try_mintAllowedErc721(cErc721Token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintAllowedErc721",
      "mintAllowedErc721(address):(uint256)",
      [ethereum.Value.fromAddress(cErc721Token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintGuardianPaused(param0: Address): boolean {
    let result = super.call(
      "mintGuardianPaused",
      "mintGuardianPaused(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_mintGuardianPaused(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "mintGuardianPaused",
      "mintGuardianPaused(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  oracle(): Address {
    let result = super.call("oracle", "oracle():(address)", []);

    return result[0].toAddress();
  }

  try_oracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("oracle", "oracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pauseGuardian(): Address {
    let result = super.call("pauseGuardian", "pauseGuardian():(address)", []);

    return result[0].toAddress();
  }

  try_pauseGuardian(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "pauseGuardian",
      "pauseGuardian():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  redeemAllowed(
    cToken: Address,
    redeemer: Address,
    redeemTokens: BigInt,
    appraisal: Comptroller__redeemAllowedInputAppraisalStruct
  ): BigInt {
    let result = super.call(
      "redeemAllowed",
      "redeemAllowed(address,address,uint256,(address[],uint256[],uint256[],uint256[],uint256,bytes)):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromAddress(redeemer),
        ethereum.Value.fromUnsignedBigInt(redeemTokens),
        ethereum.Value.fromTuple(appraisal)
      ]
    );

    return result[0].toBigInt();
  }

  try_redeemAllowed(
    cToken: Address,
    redeemer: Address,
    redeemTokens: BigInt,
    appraisal: Comptroller__redeemAllowedInputAppraisalStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemAllowed",
      "redeemAllowed(address,address,uint256,(address[],uint256[],uint256[],uint256[],uint256,bytes)):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromAddress(redeemer),
        ethereum.Value.fromUnsignedBigInt(redeemTokens),
        ethereum.Value.fromTuple(appraisal)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemAllowedErc721(
    cErc721Token: Address,
    redeemer: Address,
    tokenIds: Array<BigInt>,
    appraisal: Comptroller__redeemAllowedErc721InputAppraisalStruct
  ): BigInt {
    let result = super.call(
      "redeemAllowedErc721",
      "redeemAllowedErc721(address,address,uint256[],(address[],uint256[],uint256[],uint256[],uint256,bytes)):(uint256)",
      [
        ethereum.Value.fromAddress(cErc721Token),
        ethereum.Value.fromAddress(redeemer),
        ethereum.Value.fromUnsignedBigIntArray(tokenIds),
        ethereum.Value.fromTuple(appraisal)
      ]
    );

    return result[0].toBigInt();
  }

  try_redeemAllowedErc721(
    cErc721Token: Address,
    redeemer: Address,
    tokenIds: Array<BigInt>,
    appraisal: Comptroller__redeemAllowedErc721InputAppraisalStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemAllowedErc721",
      "redeemAllowedErc721(address,address,uint256[],(address[],uint256[],uint256[],uint256[],uint256,bytes)):(uint256)",
      [
        ethereum.Value.fromAddress(cErc721Token),
        ethereum.Value.fromAddress(redeemer),
        ethereum.Value.fromUnsignedBigIntArray(tokenIds),
        ethereum.Value.fromTuple(appraisal)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  repayBorrowAllowed(
    cToken: Address,
    payer: Address,
    borrower: Address,
    repayAmount: BigInt
  ): BigInt {
    let result = super.call(
      "repayBorrowAllowed",
      "repayBorrowAllowed(address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromAddress(payer),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(repayAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_repayBorrowAllowed(
    cToken: Address,
    payer: Address,
    borrower: Address,
    repayAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "repayBorrowAllowed",
      "repayBorrowAllowed(address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromAddress(payer),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(repayAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  seizeAllowed(
    cTokenCollateral: Address,
    cTokenBorrowed: Address,
    liquidator: Address,
    borrower: Address,
    seizeTokens: BigInt
  ): BigInt {
    let result = super.call(
      "seizeAllowed",
      "seizeAllowed(address,address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cTokenCollateral),
        ethereum.Value.fromAddress(cTokenBorrowed),
        ethereum.Value.fromAddress(liquidator),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(seizeTokens)
      ]
    );

    return result[0].toBigInt();
  }

  try_seizeAllowed(
    cTokenCollateral: Address,
    cTokenBorrowed: Address,
    liquidator: Address,
    borrower: Address,
    seizeTokens: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "seizeAllowed",
      "seizeAllowed(address,address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cTokenCollateral),
        ethereum.Value.fromAddress(cTokenBorrowed),
        ethereum.Value.fromAddress(liquidator),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(seizeTokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  seizeAllowedErc721(
    cErc721TokenCollateral: Address,
    cTokenBorrowed: Address
  ): BigInt {
    let result = super.call(
      "seizeAllowedErc721",
      "seizeAllowedErc721(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(cErc721TokenCollateral),
        ethereum.Value.fromAddress(cTokenBorrowed)
      ]
    );

    return result[0].toBigInt();
  }

  try_seizeAllowedErc721(
    cErc721TokenCollateral: Address,
    cTokenBorrowed: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "seizeAllowedErc721",
      "seizeAllowedErc721(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(cErc721TokenCollateral),
        ethereum.Value.fromAddress(cTokenBorrowed)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  seizeGuardianPaused(): boolean {
    let result = super.call(
      "seizeGuardianPaused",
      "seizeGuardianPaused():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_seizeGuardianPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "seizeGuardianPaused",
      "seizeGuardianPaused():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferAllowed(
    cToken: Address,
    src: Address,
    dst: Address,
    transferTokens: BigInt,
    appraisal: Comptroller__transferAllowedInputAppraisalStruct
  ): BigInt {
    let result = super.call(
      "transferAllowed",
      "transferAllowed(address,address,address,uint256,(address[],uint256[],uint256[],uint256[],uint256,bytes)):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromAddress(src),
        ethereum.Value.fromAddress(dst),
        ethereum.Value.fromUnsignedBigInt(transferTokens),
        ethereum.Value.fromTuple(appraisal)
      ]
    );

    return result[0].toBigInt();
  }

  try_transferAllowed(
    cToken: Address,
    src: Address,
    dst: Address,
    transferTokens: BigInt,
    appraisal: Comptroller__transferAllowedInputAppraisalStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transferAllowed",
      "transferAllowed(address,address,address,uint256,(address[],uint256[],uint256[],uint256[],uint256,bytes)):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromAddress(src),
        ethereum.Value.fromAddress(dst),
        ethereum.Value.fromUnsignedBigInt(transferTokens),
        ethereum.Value.fromTuple(appraisal)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferGuardianPaused(): boolean {
    let result = super.call(
      "transferGuardianPaused",
      "transferGuardianPaused():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_transferGuardianPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferGuardianPaused",
      "transferGuardianPaused():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class _acceptAdminCall extends ethereum.Call {
  get inputs(): _acceptAdminCall__Inputs {
    return new _acceptAdminCall__Inputs(this);
  }

  get outputs(): _acceptAdminCall__Outputs {
    return new _acceptAdminCall__Outputs(this);
  }
}

export class _acceptAdminCall__Inputs {
  _call: _acceptAdminCall;

  constructor(call: _acceptAdminCall) {
    this._call = call;
  }
}

export class _acceptAdminCall__Outputs {
  _call: _acceptAdminCall;

  constructor(call: _acceptAdminCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _acceptImplementationCall extends ethereum.Call {
  get inputs(): _acceptImplementationCall__Inputs {
    return new _acceptImplementationCall__Inputs(this);
  }

  get outputs(): _acceptImplementationCall__Outputs {
    return new _acceptImplementationCall__Outputs(this);
  }
}

export class _acceptImplementationCall__Inputs {
  _call: _acceptImplementationCall;

  constructor(call: _acceptImplementationCall) {
    this._call = call;
  }
}

export class _acceptImplementationCall__Outputs {
  _call: _acceptImplementationCall;

  constructor(call: _acceptImplementationCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _setPendingAdminCall extends ethereum.Call {
  get inputs(): _setPendingAdminCall__Inputs {
    return new _setPendingAdminCall__Inputs(this);
  }

  get outputs(): _setPendingAdminCall__Outputs {
    return new _setPendingAdminCall__Outputs(this);
  }
}

export class _setPendingAdminCall__Inputs {
  _call: _setPendingAdminCall;

  constructor(call: _setPendingAdminCall) {
    this._call = call;
  }

  get newPendingAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class _setPendingAdminCall__Outputs {
  _call: _setPendingAdminCall;

  constructor(call: _setPendingAdminCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _setPendingImplementationCall extends ethereum.Call {
  get inputs(): _setPendingImplementationCall__Inputs {
    return new _setPendingImplementationCall__Inputs(this);
  }

  get outputs(): _setPendingImplementationCall__Outputs {
    return new _setPendingImplementationCall__Outputs(this);
  }
}

export class _setPendingImplementationCall__Inputs {
  _call: _setPendingImplementationCall;

  constructor(call: _setPendingImplementationCall) {
    this._call = call;
  }

  get newPendingImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class _setPendingImplementationCall__Outputs {
  _call: _setPendingImplementationCall;

  constructor(call: _setPendingImplementationCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _becomeCall extends ethereum.Call {
  get inputs(): _becomeCall__Inputs {
    return new _becomeCall__Inputs(this);
  }

  get outputs(): _becomeCall__Outputs {
    return new _becomeCall__Outputs(this);
  }
}

export class _becomeCall__Inputs {
  _call: _becomeCall;

  constructor(call: _becomeCall) {
    this._call = call;
  }

  get unitroller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class _becomeCall__Outputs {
  _call: _becomeCall;

  constructor(call: _becomeCall) {
    this._call = call;
  }
}

export class _setBorrowCapGuardianCall extends ethereum.Call {
  get inputs(): _setBorrowCapGuardianCall__Inputs {
    return new _setBorrowCapGuardianCall__Inputs(this);
  }

  get outputs(): _setBorrowCapGuardianCall__Outputs {
    return new _setBorrowCapGuardianCall__Outputs(this);
  }
}

export class _setBorrowCapGuardianCall__Inputs {
  _call: _setBorrowCapGuardianCall;

  constructor(call: _setBorrowCapGuardianCall) {
    this._call = call;
  }

  get newBorrowCapGuardian(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class _setBorrowCapGuardianCall__Outputs {
  _call: _setBorrowCapGuardianCall;

  constructor(call: _setBorrowCapGuardianCall) {
    this._call = call;
  }
}

export class _setBorrowPausedCall extends ethereum.Call {
  get inputs(): _setBorrowPausedCall__Inputs {
    return new _setBorrowPausedCall__Inputs(this);
  }

  get outputs(): _setBorrowPausedCall__Outputs {
    return new _setBorrowPausedCall__Outputs(this);
  }
}

export class _setBorrowPausedCall__Inputs {
  _call: _setBorrowPausedCall;

  constructor(call: _setBorrowPausedCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get state(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class _setBorrowPausedCall__Outputs {
  _call: _setBorrowPausedCall;

  constructor(call: _setBorrowPausedCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class _setCloseFactorCall extends ethereum.Call {
  get inputs(): _setCloseFactorCall__Inputs {
    return new _setCloseFactorCall__Inputs(this);
  }

  get outputs(): _setCloseFactorCall__Outputs {
    return new _setCloseFactorCall__Outputs(this);
  }
}

export class _setCloseFactorCall__Inputs {
  _call: _setCloseFactorCall;

  constructor(call: _setCloseFactorCall) {
    this._call = call;
  }

  get newCloseFactorMantissa(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class _setCloseFactorCall__Outputs {
  _call: _setCloseFactorCall;

  constructor(call: _setCloseFactorCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _setCollateralFactorCall extends ethereum.Call {
  get inputs(): _setCollateralFactorCall__Inputs {
    return new _setCollateralFactorCall__Inputs(this);
  }

  get outputs(): _setCollateralFactorCall__Outputs {
    return new _setCollateralFactorCall__Outputs(this);
  }
}

export class _setCollateralFactorCall__Inputs {
  _call: _setCollateralFactorCall;

  constructor(call: _setCollateralFactorCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newCollateralFactorMantissa(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get isErc721(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class _setCollateralFactorCall__Outputs {
  _call: _setCollateralFactorCall;

  constructor(call: _setCollateralFactorCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _setCompComptrollerCall extends ethereum.Call {
  get inputs(): _setCompComptrollerCall__Inputs {
    return new _setCompComptrollerCall__Inputs(this);
  }

  get outputs(): _setCompComptrollerCall__Outputs {
    return new _setCompComptrollerCall__Outputs(this);
  }
}

export class _setCompComptrollerCall__Inputs {
  _call: _setCompComptrollerCall;

  constructor(call: _setCompComptrollerCall) {
    this._call = call;
  }

  get newCompComptroller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class _setCompComptrollerCall__Outputs {
  _call: _setCompComptrollerCall;

  constructor(call: _setCompComptrollerCall) {
    this._call = call;
  }
}

export class _setLiquidationDiscountCall extends ethereum.Call {
  get inputs(): _setLiquidationDiscountCall__Inputs {
    return new _setLiquidationDiscountCall__Inputs(this);
  }

  get outputs(): _setLiquidationDiscountCall__Outputs {
    return new _setLiquidationDiscountCall__Outputs(this);
  }
}

export class _setLiquidationDiscountCall__Inputs {
  _call: _setLiquidationDiscountCall;

  constructor(call: _setLiquidationDiscountCall) {
    this._call = call;
  }

  get newLiquidationDiscountMantissa(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class _setLiquidationDiscountCall__Outputs {
  _call: _setLiquidationDiscountCall;

  constructor(call: _setLiquidationDiscountCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _setLiquidationIncentiveCall extends ethereum.Call {
  get inputs(): _setLiquidationIncentiveCall__Inputs {
    return new _setLiquidationIncentiveCall__Inputs(this);
  }

  get outputs(): _setLiquidationIncentiveCall__Outputs {
    return new _setLiquidationIncentiveCall__Outputs(this);
  }
}

export class _setLiquidationIncentiveCall__Inputs {
  _call: _setLiquidationIncentiveCall;

  constructor(call: _setLiquidationIncentiveCall) {
    this._call = call;
  }

  get newLiquidationIncentiveMantissa(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class _setLiquidationIncentiveCall__Outputs {
  _call: _setLiquidationIncentiveCall;

  constructor(call: _setLiquidationIncentiveCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _setLiquidityAssessorCall extends ethereum.Call {
  get inputs(): _setLiquidityAssessorCall__Inputs {
    return new _setLiquidityAssessorCall__Inputs(this);
  }

  get outputs(): _setLiquidityAssessorCall__Outputs {
    return new _setLiquidityAssessorCall__Outputs(this);
  }
}

export class _setLiquidityAssessorCall__Inputs {
  _call: _setLiquidityAssessorCall;

  constructor(call: _setLiquidityAssessorCall) {
    this._call = call;
  }

  get newLiquidityAssessor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class _setLiquidityAssessorCall__Outputs {
  _call: _setLiquidityAssessorCall;

  constructor(call: _setLiquidityAssessorCall) {
    this._call = call;
  }
}

export class _setMarketBorrowCapsCall extends ethereum.Call {
  get inputs(): _setMarketBorrowCapsCall__Inputs {
    return new _setMarketBorrowCapsCall__Inputs(this);
  }

  get outputs(): _setMarketBorrowCapsCall__Outputs {
    return new _setMarketBorrowCapsCall__Outputs(this);
  }
}

export class _setMarketBorrowCapsCall__Inputs {
  _call: _setMarketBorrowCapsCall;

  constructor(call: _setMarketBorrowCapsCall) {
    this._call = call;
  }

  get cTokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get newBorrowCaps(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class _setMarketBorrowCapsCall__Outputs {
  _call: _setMarketBorrowCapsCall;

  constructor(call: _setMarketBorrowCapsCall) {
    this._call = call;
  }
}

export class _setMintPausedCall extends ethereum.Call {
  get inputs(): _setMintPausedCall__Inputs {
    return new _setMintPausedCall__Inputs(this);
  }

  get outputs(): _setMintPausedCall__Outputs {
    return new _setMintPausedCall__Outputs(this);
  }
}

export class _setMintPausedCall__Inputs {
  _call: _setMintPausedCall;

  constructor(call: _setMintPausedCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get state(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class _setMintPausedCall__Outputs {
  _call: _setMintPausedCall;

  constructor(call: _setMintPausedCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class _setPauseGuardianCall extends ethereum.Call {
  get inputs(): _setPauseGuardianCall__Inputs {
    return new _setPauseGuardianCall__Inputs(this);
  }

  get outputs(): _setPauseGuardianCall__Outputs {
    return new _setPauseGuardianCall__Outputs(this);
  }
}

export class _setPauseGuardianCall__Inputs {
  _call: _setPauseGuardianCall;

  constructor(call: _setPauseGuardianCall) {
    this._call = call;
  }

  get newPauseGuardian(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class _setPauseGuardianCall__Outputs {
  _call: _setPauseGuardianCall;

  constructor(call: _setPauseGuardianCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _setPriceOracleCall extends ethereum.Call {
  get inputs(): _setPriceOracleCall__Inputs {
    return new _setPriceOracleCall__Inputs(this);
  }

  get outputs(): _setPriceOracleCall__Outputs {
    return new _setPriceOracleCall__Outputs(this);
  }
}

export class _setPriceOracleCall__Inputs {
  _call: _setPriceOracleCall;

  constructor(call: _setPriceOracleCall) {
    this._call = call;
  }

  get newOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class _setPriceOracleCall__Outputs {
  _call: _setPriceOracleCall;

  constructor(call: _setPriceOracleCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _setSeizePausedCall extends ethereum.Call {
  get inputs(): _setSeizePausedCall__Inputs {
    return new _setSeizePausedCall__Inputs(this);
  }

  get outputs(): _setSeizePausedCall__Outputs {
    return new _setSeizePausedCall__Outputs(this);
  }
}

export class _setSeizePausedCall__Inputs {
  _call: _setSeizePausedCall;

  constructor(call: _setSeizePausedCall) {
    this._call = call;
  }

  get state(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class _setSeizePausedCall__Outputs {
  _call: _setSeizePausedCall;

  constructor(call: _setSeizePausedCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class _setTransferPausedCall extends ethereum.Call {
  get inputs(): _setTransferPausedCall__Inputs {
    return new _setTransferPausedCall__Inputs(this);
  }

  get outputs(): _setTransferPausedCall__Outputs {
    return new _setTransferPausedCall__Outputs(this);
  }
}

export class _setTransferPausedCall__Inputs {
  _call: _setTransferPausedCall;

  constructor(call: _setTransferPausedCall) {
    this._call = call;
  }

  get state(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class _setTransferPausedCall__Outputs {
  _call: _setTransferPausedCall;

  constructor(call: _setTransferPausedCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class _supportMarketCall extends ethereum.Call {
  get inputs(): _supportMarketCall__Inputs {
    return new _supportMarketCall__Inputs(this);
  }

  get outputs(): _supportMarketCall__Outputs {
    return new _supportMarketCall__Outputs(this);
  }
}

export class _supportMarketCall__Inputs {
  _call: _supportMarketCall;

  constructor(call: _supportMarketCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get isErc721(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class _supportMarketCall__Outputs {
  _call: _supportMarketCall;

  constructor(call: _supportMarketCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BorrowAllowedCall extends ethereum.Call {
  get inputs(): BorrowAllowedCall__Inputs {
    return new BorrowAllowedCall__Inputs(this);
  }

  get outputs(): BorrowAllowedCall__Outputs {
    return new BorrowAllowedCall__Outputs(this);
  }
}

export class BorrowAllowedCall__Inputs {
  _call: BorrowAllowedCall;

  constructor(call: BorrowAllowedCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get borrower(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get borrowAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get appraisal(): BorrowAllowedCallAppraisalStruct {
    return changetype<BorrowAllowedCallAppraisalStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }
}

export class BorrowAllowedCall__Outputs {
  _call: BorrowAllowedCall;

  constructor(call: BorrowAllowedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BorrowAllowedCallAppraisalStruct extends ethereum.Tuple {
  get appraisalTokens(): Array<Address> {
    return this[0].toAddressArray();
  }

  get appraisalLengths(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get appraisalTokenIds(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get appraisalValues(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get appraisalGoodUntil(): BigInt {
    return this[4].toBigInt();
  }

  get signature(): Bytes {
    return this[5].toBytes();
  }
}

export class LiquidateBorrowAllowedCall extends ethereum.Call {
  get inputs(): LiquidateBorrowAllowedCall__Inputs {
    return new LiquidateBorrowAllowedCall__Inputs(this);
  }

  get outputs(): LiquidateBorrowAllowedCall__Outputs {
    return new LiquidateBorrowAllowedCall__Outputs(this);
  }
}

export class LiquidateBorrowAllowedCall__Inputs {
  _call: LiquidateBorrowAllowedCall;

  constructor(call: LiquidateBorrowAllowedCall) {
    this._call = call;
  }

  get cTokenBorrowed(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get cTokenCollateral(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get borrower(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get repayAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get appraisal(): LiquidateBorrowAllowedCallAppraisalStruct {
    return changetype<LiquidateBorrowAllowedCallAppraisalStruct>(
      this._call.inputValues[4].value.toTuple()
    );
  }
}

export class LiquidateBorrowAllowedCall__Outputs {
  _call: LiquidateBorrowAllowedCall;

  constructor(call: LiquidateBorrowAllowedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LiquidateBorrowAllowedCallAppraisalStruct extends ethereum.Tuple {
  get appraisalTokens(): Array<Address> {
    return this[0].toAddressArray();
  }

  get appraisalLengths(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get appraisalTokenIds(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get appraisalValues(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get appraisalGoodUntil(): BigInt {
    return this[4].toBigInt();
  }

  get signature(): Bytes {
    return this[5].toBytes();
  }
}

export class LiquidateBorrowAllowedErc721Call extends ethereum.Call {
  get inputs(): LiquidateBorrowAllowedErc721Call__Inputs {
    return new LiquidateBorrowAllowedErc721Call__Inputs(this);
  }

  get outputs(): LiquidateBorrowAllowedErc721Call__Outputs {
    return new LiquidateBorrowAllowedErc721Call__Outputs(this);
  }
}

export class LiquidateBorrowAllowedErc721Call__Inputs {
  _call: LiquidateBorrowAllowedErc721Call;

  constructor(call: LiquidateBorrowAllowedErc721Call) {
    this._call = call;
  }

  get cTokenBorrowed(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get cErc721TokenCollateral(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get borrower(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get repayAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get appraisal(): LiquidateBorrowAllowedErc721CallAppraisalStruct {
    return changetype<LiquidateBorrowAllowedErc721CallAppraisalStruct>(
      this._call.inputValues[5].value.toTuple()
    );
  }
}

export class LiquidateBorrowAllowedErc721Call__Outputs {
  _call: LiquidateBorrowAllowedErc721Call;

  constructor(call: LiquidateBorrowAllowedErc721Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LiquidateBorrowAllowedErc721CallAppraisalStruct extends ethereum.Tuple {
  get appraisalTokens(): Array<Address> {
    return this[0].toAddressArray();
  }

  get appraisalLengths(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get appraisalTokenIds(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get appraisalValues(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get appraisalGoodUntil(): BigInt {
    return this[4].toBigInt();
  }

  get signature(): Bytes {
    return this[5].toBytes();
  }
}

export class MintAllowedCall extends ethereum.Call {
  get inputs(): MintAllowedCall__Inputs {
    return new MintAllowedCall__Inputs(this);
  }

  get outputs(): MintAllowedCall__Outputs {
    return new MintAllowedCall__Outputs(this);
  }
}

export class MintAllowedCall__Inputs {
  _call: MintAllowedCall;

  constructor(call: MintAllowedCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get minter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MintAllowedCall__Outputs {
  _call: MintAllowedCall;

  constructor(call: MintAllowedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintAllowedErc721Call extends ethereum.Call {
  get inputs(): MintAllowedErc721Call__Inputs {
    return new MintAllowedErc721Call__Inputs(this);
  }

  get outputs(): MintAllowedErc721Call__Outputs {
    return new MintAllowedErc721Call__Outputs(this);
  }
}

export class MintAllowedErc721Call__Inputs {
  _call: MintAllowedErc721Call;

  constructor(call: MintAllowedErc721Call) {
    this._call = call;
  }

  get cErc721Token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class MintAllowedErc721Call__Outputs {
  _call: MintAllowedErc721Call;

  constructor(call: MintAllowedErc721Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemAllowedCall extends ethereum.Call {
  get inputs(): RedeemAllowedCall__Inputs {
    return new RedeemAllowedCall__Inputs(this);
  }

  get outputs(): RedeemAllowedCall__Outputs {
    return new RedeemAllowedCall__Outputs(this);
  }
}

export class RedeemAllowedCall__Inputs {
  _call: RedeemAllowedCall;

  constructor(call: RedeemAllowedCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get redeemer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get redeemTokens(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get appraisal(): RedeemAllowedCallAppraisalStruct {
    return changetype<RedeemAllowedCallAppraisalStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }
}

export class RedeemAllowedCall__Outputs {
  _call: RedeemAllowedCall;

  constructor(call: RedeemAllowedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemAllowedCallAppraisalStruct extends ethereum.Tuple {
  get appraisalTokens(): Array<Address> {
    return this[0].toAddressArray();
  }

  get appraisalLengths(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get appraisalTokenIds(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get appraisalValues(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get appraisalGoodUntil(): BigInt {
    return this[4].toBigInt();
  }

  get signature(): Bytes {
    return this[5].toBytes();
  }
}

export class RedeemAllowedErc721Call extends ethereum.Call {
  get inputs(): RedeemAllowedErc721Call__Inputs {
    return new RedeemAllowedErc721Call__Inputs(this);
  }

  get outputs(): RedeemAllowedErc721Call__Outputs {
    return new RedeemAllowedErc721Call__Outputs(this);
  }
}

export class RedeemAllowedErc721Call__Inputs {
  _call: RedeemAllowedErc721Call;

  constructor(call: RedeemAllowedErc721Call) {
    this._call = call;
  }

  get cErc721Token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get redeemer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get appraisal(): RedeemAllowedErc721CallAppraisalStruct {
    return changetype<RedeemAllowedErc721CallAppraisalStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }
}

export class RedeemAllowedErc721Call__Outputs {
  _call: RedeemAllowedErc721Call;

  constructor(call: RedeemAllowedErc721Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemAllowedErc721CallAppraisalStruct extends ethereum.Tuple {
  get appraisalTokens(): Array<Address> {
    return this[0].toAddressArray();
  }

  get appraisalLengths(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get appraisalTokenIds(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get appraisalValues(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get appraisalGoodUntil(): BigInt {
    return this[4].toBigInt();
  }

  get signature(): Bytes {
    return this[5].toBytes();
  }
}

export class RedeemVerifyCall extends ethereum.Call {
  get inputs(): RedeemVerifyCall__Inputs {
    return new RedeemVerifyCall__Inputs(this);
  }

  get outputs(): RedeemVerifyCall__Outputs {
    return new RedeemVerifyCall__Outputs(this);
  }
}

export class RedeemVerifyCall__Inputs {
  _call: RedeemVerifyCall;

  constructor(call: RedeemVerifyCall) {
    this._call = call;
  }

  get redeemAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get redeemTokens(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RedeemVerifyCall__Outputs {
  _call: RedeemVerifyCall;

  constructor(call: RedeemVerifyCall) {
    this._call = call;
  }
}

export class RepayBorrowAllowedCall extends ethereum.Call {
  get inputs(): RepayBorrowAllowedCall__Inputs {
    return new RepayBorrowAllowedCall__Inputs(this);
  }

  get outputs(): RepayBorrowAllowedCall__Outputs {
    return new RepayBorrowAllowedCall__Outputs(this);
  }
}

export class RepayBorrowAllowedCall__Inputs {
  _call: RepayBorrowAllowedCall;

  constructor(call: RepayBorrowAllowedCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get payer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get borrower(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get repayAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class RepayBorrowAllowedCall__Outputs {
  _call: RepayBorrowAllowedCall;

  constructor(call: RepayBorrowAllowedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SeizeAllowedCall extends ethereum.Call {
  get inputs(): SeizeAllowedCall__Inputs {
    return new SeizeAllowedCall__Inputs(this);
  }

  get outputs(): SeizeAllowedCall__Outputs {
    return new SeizeAllowedCall__Outputs(this);
  }
}

export class SeizeAllowedCall__Inputs {
  _call: SeizeAllowedCall;

  constructor(call: SeizeAllowedCall) {
    this._call = call;
  }

  get cTokenCollateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get cTokenBorrowed(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get liquidator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get borrower(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get seizeTokens(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SeizeAllowedCall__Outputs {
  _call: SeizeAllowedCall;

  constructor(call: SeizeAllowedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SeizeAllowedErc721Call extends ethereum.Call {
  get inputs(): SeizeAllowedErc721Call__Inputs {
    return new SeizeAllowedErc721Call__Inputs(this);
  }

  get outputs(): SeizeAllowedErc721Call__Outputs {
    return new SeizeAllowedErc721Call__Outputs(this);
  }
}

export class SeizeAllowedErc721Call__Inputs {
  _call: SeizeAllowedErc721Call;

  constructor(call: SeizeAllowedErc721Call) {
    this._call = call;
  }

  get cErc721TokenCollateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get cTokenBorrowed(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SeizeAllowedErc721Call__Outputs {
  _call: SeizeAllowedErc721Call;

  constructor(call: SeizeAllowedErc721Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferAllowedCall extends ethereum.Call {
  get inputs(): TransferAllowedCall__Inputs {
    return new TransferAllowedCall__Inputs(this);
  }

  get outputs(): TransferAllowedCall__Outputs {
    return new TransferAllowedCall__Outputs(this);
  }
}

export class TransferAllowedCall__Inputs {
  _call: TransferAllowedCall;

  constructor(call: TransferAllowedCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get src(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get dst(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get transferTokens(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get appraisal(): TransferAllowedCallAppraisalStruct {
    return changetype<TransferAllowedCallAppraisalStruct>(
      this._call.inputValues[4].value.toTuple()
    );
  }
}

export class TransferAllowedCall__Outputs {
  _call: TransferAllowedCall;

  constructor(call: TransferAllowedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferAllowedCallAppraisalStruct extends ethereum.Tuple {
  get appraisalTokens(): Array<Address> {
    return this[0].toAddressArray();
  }

  get appraisalLengths(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get appraisalTokenIds(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get appraisalValues(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get appraisalGoodUntil(): BigInt {
    return this[4].toBigInt();
  }

  get signature(): Bytes {
    return this[5].toBytes();
  }
}
